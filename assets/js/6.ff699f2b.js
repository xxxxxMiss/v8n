(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{153:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._m(1),t._m(2),t._m(3),a("p",[t._v("In order to build the validation we use a paradigm called chaining. This\nessentially means that you build each validation rule after one another. This\ncreates a fluent writing experience. You can chain any rules to create your\ncustom validations.")]),t._m(4),t._m(5),t._m(6),a("p",[t._v("There is no need to write one rule per line, it's just a nice convention to\nfollow for clean code. For simple validations you can simply inline your\nvalidation. You can also use these in conditionals and loops directly.")]),t._m(7),t._m(8),t._m(9),a("p",[t._v("Some rules also have parameters to control how they validate your value. These\nare passed right in the chain. Notice that the stuff you pass to rules is not\nvalidated, it is simply configuration for the rule.")]),t._m(10),a("p",[t._v("For all the rules you can chain take a look at the\n"),a("router-link",{attrs:{to:"/api/#built-in-rules"}},[t._v("full list")]),t._v(".")],1),t._m(11),t._m(12),t._m(13),t._m(14),a("p",[t._v("Notice how modifiers don't have braces "),a("code",[t._v("()")]),t._v(", this distinguishes them from\nregular rules. There are three modifiers provided which you can use. Two of them\ncater to arrays and one is more general purpose. Take a peek at all the\n"),a("router-link",{attrs:{to:"/api/#built-in-modifiers"}},[t._v("built-in modifiers")]),t._v(" for a little more info.")],1),t._m(15),t._m(16),a("p",[t._v("The validation strategy is chosen with the method at the end of your validation\nchain. This method also receives the value you want to validate as it's only\nargument. So keep in mind that whatever you actually want to validate is written\nat the end of the chain, not anywhere within the rules or at the beginning.")]),t._m(17),t._m(18),t._m(19),a("p",[t._v("This strategy is most useful for conditionals since you can pass its result\ndirectly into an "),a("code",[t._v("if")]),t._v(" statement or similar. For more details about "),a("code",[t._v("test()")]),t._v("\nand for additional examples take a look at it's "),a("router-link",{attrs:{to:"/api/#test"}},[t._v("API documentation")]),t._v(".")],1),t._m(20),t._m(21),t._m(22),a("p",[t._v("This is useful for providing detailed error messages but can also be used for\nany number of other purposes. For some more in-depth examples head over\n"),a("router-link",{attrs:{to:"/api/#testall"}},[t._v("to the documentation for "),a("code",[t._v("testAll()")])]),t._v(".")],1),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),a("p",[t._v("The array will contain "),a("router-link",{attrs:{to:"/api/#validationexception"}},[a("code",[t._v("ValidationException")]),t._v(" objects")]),t._v("\nthat you can work with.")],1)]),t._m(23),t._m(24),t._m(25),t._m(26),a("p",[t._v("The resulting "),a("router-link",{attrs:{to:"/api/#validationexception"}},[a("code",[t._v("ValidationException")])]),t._v(" will also contain\ninformation about the rule that failed so that you may display errors or\nsimilar. You can find out more in the\n"),a("router-link",{attrs:{to:"/api/#check"}},[t._v("documentation for "),a("code",[t._v("check()")])]),t._v(".")],1),t._m(27),t._m(28),t._m(29),a("div",{staticClass:"warning custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),a("p",[t._v("There are no built-in asynchronous rules. If you want to use this feature, you\ncan check out the guide on "),a("router-link",{attrs:{to:"/Extending.html"}},[t._v("Extending")]),t._v(" and specifically on the\ncreation of "),a("router-link",{attrs:{to:"/Extending.html#asynchronous-rules"}},[t._v("asynchronous rules")]),t._v(".")],1)]),a("p",[t._v("Make sure to take a look the "),a("router-link",{attrs:{to:"/api/#testasync"}},[t._v("documentation for "),a("code",[t._v("testAsync()")])]),t._v(" to\nget a good grasp of the return values it will yield.")],1),t._m(30),a("p",[t._v("The flexibility of chaining adds a very nice additional feature. If you have\nmultiple validations that share common rules you can reuse them across your file\nor even export them for use throughout the whole project. This is particulary\nuseful for complex validations. This also allows you to validate different\nvalues with the same set of rules.")]),t._m(31),a("p",[t._v("You can of course perform different validation strategies on the same set of\nrules. The rule-chain is completely decoupled from anything that comes after it,\nso you can do as much as you like with it after creation.")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"building-validations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#building-validations","aria-hidden":"true"}},[this._v("#")]),this._v(" Building Validations")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Setting up validations is really easy with v8n. Everything starts from the base\nfunction "),s("code",[this._v("v8n()")]),this._v(". After calling this function you can chain all the rules you\nlike to create simple or complex validations.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token function"}},[this._v("v8n")]),s("span",{attrs:{class:"token punctuation"}},[this._v("(")]),s("span",{attrs:{class:"token punctuation"}},[this._v(")")]),s("span",{attrs:{class:"token punctuation"}},[this._v(";")]),this._v(" "),s("span",{attrs:{class:"token comment"}},[this._v("// Chain after this!")]),this._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"chaining-rules"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#chaining-rules","aria-hidden":"true"}},[this._v("#")]),this._v(" Chaining rules")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("v8n")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("string")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("first")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"B"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Bread"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// The validation strategy, this will be true")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),s("p",[this._v("There are no sanity checks, combining conflicting rules is possible.")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("At the end of your rules you will chain a\n"),s("a",{attrs:{href:"#validation-strategies"}},[this._v("validation strategy")]),this._v(". This will end the chain and give\nyou the result of the validation. There are multiple available, make sure to\nfind the right one for you.")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("v8n")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("number")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// If 2 is a number, do something!")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("It's important to keep types in mind when validating. A string that consists of\njust a number is not a number in the JavaScript sense. If you pass "),s("code",[this._v("'12'")]),this._v(" to\nthe "),s("code",[this._v("number()")]),this._v(" rule you'll get a negative result since "),s("code",[this._v("'12'")]),this._v(" is a string.\nv8n makes no assumptions about your types, so you need be explicit here and\nconvert the string manually beforehand.")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("v8n")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("number")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"12"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// False because it's a string")]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("v8n")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("number")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("Number")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"12"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// True because Number turns '12' into 12")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("v8n")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("min")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// False, 1 is not at least 2")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"modifiers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#modifiers","aria-hidden":"true"}},[this._v("#")]),this._v(" Modifiers")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Sometimes you might want the inverse of a rule somewhere in your validation. For\nexample you might want to check that something isn't "),s("code",[this._v("null")]),this._v(" when it can be any\nother type. This is where modifiers come in. Modifiers are similar to rules,\nthey are also chained but instead of validating anything they will augment the\nfollowing rule.")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("v8n")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("not"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// True, 2 isn't null")]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("v8n")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("every"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("number")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// False, hello isn't a number")]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("v8n")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("some"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("number")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// True, there is at least one number")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("TIP")]),s("p",[this._v("Modifiers can be combined on a rule. Simply chain them!")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"validation-strategies"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#validation-strategies","aria-hidden":"true"}},[this._v("#")]),this._v(" Validation strategies")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Most validation will only return "),s("code",[this._v("true")]),this._v(" or "),s("code",[this._v("false")]),this._v(". While v8n offers this, it\nalso gives you the ability to validate with different output formats. There are\ncurrently 4 validation strategies for use and all of them are slightly different\nfrom one another.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"boolean-based-validation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#boolean-based-validation","aria-hidden":"true"}},[this._v("#")]),this._v(" Boolean based validation")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Of course when validating many people will want to know if the given value\npasses or not. This is regular "),s("code",[this._v("boolean")]),this._v(" validation and v8n performs this if\nyou use the "),s("code",[this._v("test()")]),this._v(" method. Quite simply this will return true if all the rules\npass and false if any of them fails.")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("v8n")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("string")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Melon"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// True")]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("v8n")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("string")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" age"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// False, this is an object")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"array-based-validation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-based-validation","aria-hidden":"true"}},[this._v("#")]),this._v(" Array based validation")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("If you really need to know what was wrong with the value you passed to v8n,\nsimply getting "),s("code",[this._v("true")]),this._v(" or "),s("code",[this._v("false")]),this._v(" won't do you any good. This is where\narray-based comes in. If you use "),s("code",[this._v("testAll()")]),this._v(" you will always receive an array in\nreturn. The array will be empty if no rules failed, but it will contain\nValidationException objects indicating each fail if they occur. This also means\nthat this strategy does not stop when any rule fails like the boolean-based\nversion does, instead it will always run all the rules.")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("v8n")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("string")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("first")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"H"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("last")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"o"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("testAll")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// Returns [] since every rule passes")]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("v8n")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("string")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("first")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"H"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("last")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"o"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("testAll")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Hi"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// Returns [ValidationException{rule: {name: "last"...}, ...}]')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),s("p",[this._v("Keep in mind that this validation strategy will work exactly opposite if used\nin conditionals compared to "),s("code",[this._v("test()")]),this._v(". This is because JavaScript will consider\nan empty array to be a falsy value, so no errors would actually result in the\nconditional passing here. Make sure to keep this in mind when checking whether\nthe validation passed here.")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"exception-based-validation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exception-based-validation","aria-hidden":"true"}},[this._v("#")]),this._v(" Exception based validation")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("In some cases you might not want to explicity check if validation passed in a\nprocess. If your entire setup is based on a "),s("code",[this._v("try-catch")]),this._v(" you might run all of\nyour code and catch any errors with a single catch to simplify your code. v8n\noffers this type of validation too. When you use "),s("code",[this._v("check()")]),this._v(" an exception will\nbe thrown if any rule fails. If all rules pass there just won't be any return\nvalue at all.")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("v8n")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("boolean")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("check")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Lion"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// Will throw an exception since "Lion" is not a boolean')]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token class-name"}},[t._v("exception")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// Handle exception in some way")]),t._v("\n  exception"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rule"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// Rule object of the first failed rule")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"asynchronous-validation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#asynchronous-validation","aria-hidden":"true"}},[this._v("#")]),this._v(" Asynchronous validation")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("A very interesting use-case for validation might be an availability check for\na username or an email. Since your frontend can't know if a user is in the\ndatabase, you would need to query the server for this. Requesting something from\nthe server takes time and any library you might use to achieve it will perform\nthe request in an asynchronous way. All the strategies above don't support this\ntype of rule though, since they will return a result before the server has a\nchance to respond. This is where we need "),s("code",[this._v("testAsync()")]),this._v(" to run validations\nasynchronously and await all the returns. You will ultimately receive a\n"),s("code",[this._v("Promise")]),this._v(" back which you can react to. It resolves to the value your validated\nand would reject to a "),s("code",[this._v("ValidationException")]),this._v(".")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("v8n")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("string")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// You can use regular rules too")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("checkUsernameAvailable")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// This asks something from a server")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("testAsync")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"myUsername"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// Promise return")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("then")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("validatedValue "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" validatedValue"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("catch")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exception "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" exception"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"reusing-validations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reusing-validations","aria-hidden":"true"}},[this._v("#")]),this._v(" Reusing validations")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" val "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("v8n")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("not"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("min")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nval"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// True")]),t._v("\nval"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// False")]),t._v("\nval"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("max")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("7")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// False")]),t._v("\n")])])])}],!1,null,null,null);s.default=e.exports}}]);