(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{157:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"extending"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#extending","aria-hidden":"true"}},[t._v("#")]),t._v(" Extending")]),s("p",[t._v("Even though v8n comes with more than 30 validation rules already baked right in,\nyou will often find that you need something else for your project. Of course\nit's super easy to extend v8n to use your own rules in the same fluid way. Rules\nare importantly just functions with a name that return either "),s("code",[t._v("true")]),t._v(", "),s("code",[t._v("false")]),t._v(" or\nin the case of asynchronous validation a "),s("code",[t._v("Promise")]),t._v(" that resolves to a "),s("code",[t._v("boolean")]),t._v(".\nExtending is always done using the "),s("code",[t._v("extend()")]),t._v(" method on the v8n object. It\nreceives an object as it's only parameter that contains the name of the rule as\nthe key and the function as the value.")]),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),s("p",[t._v("Custom rules will override built-in rules with the same name.")])]),s("h2",{attrs:{id:"regular-rules"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regular-rules","aria-hidden":"true"}},[t._v("#")]),t._v(" Regular rules")]),s("p",[t._v("Regular rules are simple functions that ultimately return a "),s("code",[t._v("boolean")]),t._v(". You can\ndo however much you want within the function, including nesting more validation\nchains from new v8n calls. Specifically your function needs to be passed to as\nthe value of an object given to "),s("code",[t._v("extend()")]),t._v(". You can have as many parameters on\nyour rule as you like, but the return value must be a function that returns the\n"),s("code",[t._v("boolean")]),t._v(" mentioned above.")]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("v8n"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("extend")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  myCustomRule"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" expected "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" value "),s("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" expected"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token function"}},[t._v("v8n")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("myCustomRule")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"bar"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("test")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"foo"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// False")]),t._v("\n")])])]),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),s("p",[t._v("The "),s("code",[t._v("extend()")]),t._v(" method is not called on "),s("code",[t._v("v8n()")]),t._v(" but instead is a property of\nthe "),s("code",[t._v("v8n")]),t._v(" object. Make sure to ommit the braces here!")])]),s("p",[t._v("If you really love arrow functions and single lines, you could make the above\nrule even smaller.")]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{attrs:{class:"token function-variable function"}},[t._v("myCustomRule")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" expected "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" value "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" value "),s("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" expected"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nv8n"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("extend")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" myCustomRule "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Your function should return a function and not just the boolean. This is\nimportant so that you can actually work with the value for validation. The value\nwill be available as the only argument of the returned function so that you can\nwork with it.")]),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),s("p",[t._v("Your custom function does not accept the value as a parameter, it only receives\nit's own configuration. The value is available from a function within the rule.")])]),s("p",[t._v("If you omit the function return you will still be fine, but your validation\ncould not work with the value that is being validated. This might be useful if\nyou are validating that some external condition not dependent on the value is\nmet. Usually you'll want the value though.")]),s("h2",{attrs:{id:"asynchronous-rules"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#asynchronous-rules","aria-hidden":"true"}},[t._v("#")]),t._v(" Asynchronous rules")]),s("p",[t._v("Asynchronous rules are very similar to regular rules. There are only subtle\ndifferences in declaration and usage.")]),s("ul",[s("li",[t._v("Can only be used with "),s("code",[t._v("asyncTest()")]),t._v(" strategy")]),s("li",[t._v("Must return a "),s("code",[t._v("Promise")]),t._v(" that resolves to "),s("code",[t._v("boolean")])])]),s("p",[t._v("Essentially you defined these rules exactly the same as any regular rule. The\nthing that these make possible is that you can return "),s("code",[t._v("Promise")]),t._v(" instead of\nactually having to get the value beforehand. This is particularly useful for\ncalls to a webserver for some sort of backend validation or database checks. The\n"),s("code",[t._v("Promise")]),t._v(" then needs to resolve to a "),s("code",[t._v("boolean")]),t._v(" value and v8n will handle the\nrest, including rejecting if anythingn happens or if it resolves to "),s("code",[t._v("false")]),t._v(". You\ndon't have to reject the "),s("code",[t._v("Promise")]),t._v(" yourself.")]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{attrs:{class:"token function-variable function"}},[t._v("myAsyncCustomRule")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" expected "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// fetches data from an api, for example, and resolves with the result")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("fetch")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"some API call"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Promise"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("resolve")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result "),s("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" expected"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nv8n"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("extend")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" myAsyncCustomRule "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Most popular HTTP libraries will return Promises, so this will let you simply\npass them to return and be done with it. Everything will be handled by v8n\nand the "),s("code",[t._v("testAsync()")]),t._v(" strategy.")])])}],!1,null,null,null);a.default=e.exports}}]);